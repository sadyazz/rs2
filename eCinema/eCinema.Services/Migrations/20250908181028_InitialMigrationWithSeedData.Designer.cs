// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCinema.Services.Database;

#nullable disable

namespace eCinema.Services.Migrations
{
    [DbContext(typeof(eCinemaDBContext))]
    [Migration("20250908181028_InitialMigrationWithSeedData")]
    partial class InitialMigrationWithSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCinema.Services.Database.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique();

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "English actress known for roles in Pride & Prejudice, Atonement, and Pirates of the Caribbean.",
                            DateOfBirth = new DateTime(1985, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keira",
                            IsDeleted = false,
                            LastName = "Knightley"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "British actor, acclaimed for Succession, Pride & Prejudice, and Ripper Street.",
                            DateOfBirth = new DateTime(1974, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Matthew",
                            IsDeleted = false,
                            LastName = "Macfadyen"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "English actress, Golden Globe winner, known for Gone Girl and Pride & Prejudice.",
                            DateOfBirth = new DateTime(1979, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Rosamund",
                            IsDeleted = false,
                            LastName = "Pike"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "American actress and voice actress for Coraline Jones.",
                            DateOfBirth = new DateTime(1994, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dakota",
                            IsDeleted = false,
                            LastName = "Fanning"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "American actress, known for Desperate Housewives and the voice of Mel Jones in Coraline.",
                            DateOfBirth = new DateTime(1964, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Teri",
                            IsDeleted = false,
                            LastName = "Hatcher"
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Canadian actor and producer, best known for his role as Deadpool in the Marvel franchise.",
                            DateOfBirth = new DateTime(1976, 10, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ryan",
                            IsDeleted = false,
                            LastName = "Reynolds"
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Australian actor, singer, and producer, widely recognized for portraying Wolverine in the X-Men film series.",
                            DateOfBirth = new DateTime(1968, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hugh",
                            IsDeleted = false,
                            LastName = "Jackman"
                        },
                        new
                        {
                            Id = 10,
                            Biography = "Irish actor known for Peaky Blinders, Inception, and portraying J. Robert Oppenheimer in Christopher Nolan's Oppenheimer.",
                            DateOfBirth = new DateTime(1976, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Cillian",
                            IsDeleted = false,
                            LastName = "Murphy"
                        },
                        new
                        {
                            Id = 11,
                            Biography = "American actor and producer, acclaimed for his roles in Iron Man, Sherlock Holmes, and Oppenheimer.",
                            DateOfBirth = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Robert",
                            IsDeleted = false,
                            LastName = "Downey Jr."
                        },
                        new
                        {
                            Id = 12,
                            Biography = "Australian actress and producer, known for The Wolf of Wall Street, I, Tonya, and Barbie.",
                            DateOfBirth = new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Margot",
                            IsDeleted = false,
                            LastName = "Robbie"
                        },
                        new
                        {
                            Id = 13,
                            Biography = "Canadian actor and musician, known for La La Land, Drive, and his role as Ken in Barbie.",
                            DateOfBirth = new DateTime(1980, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ryan",
                            IsDeleted = false,
                            LastName = "Gosling"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            IsDeleted = false,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            IsDeleted = false,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            IsDeleted = false,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            IsDeleted = false,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            IsDeleted = false,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            IsDeleted = false,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            IsDeleted = false,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 14,
                            Description = "test",
                            IsDeleted = false,
                            Name = "test soft deleted genre"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Kids hall"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Hall 1"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Hall 2"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "4DX Hall"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<float>("Grade")
                        .HasColumnType("real");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsComingSoon")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Description = "Sparks fly when spirited Elizabeth Bennet meets single, rich, and proud Mr. Darcy. But pride, prejudice and misunderstandings threaten to keep them apart.",
                            Director = "Joe Wright",
                            DurationMinutes = 129,
                            Grade = 5f,
                            IsComingSoon = false,
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2005, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseYear = 2005,
                            Title = "Pride and Prejudice",
                            TrailerUrl = "https://www.youtube.com/watch?v=1dYv5u6v55Y"
                        },
                        new
                        {
                            Id = 4,
                            Description = "An adventurous girl finds another world that is a strangely idealized version of her frustrating home, but it has sinister secrets.",
                            Director = "Henry Selick",
                            DurationMinutes = 100,
                            Grade = 5f,
                            IsComingSoon = false,
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2009, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseYear = 2009,
                            Title = "Coraline",
                            TrailerUrl = "https://www.youtube.com/watch?v=LO3n67BQvh0"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Wolverine is recovering from his injuries when he crosses paths with the loudmouth Deadpool. They team up to defeat a common enemy.",
                            Director = "Shawn Levy",
                            DurationMinutes = 127,
                            Grade = 5f,
                            IsComingSoon = false,
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2024, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseYear = 2024,
                            Title = "Deadpool & Wolverine",
                            TrailerUrl = "https://www.youtube.com/watch?v=73_1biulkYk"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A romantic drama that follows the consequences of a false accusation that forever changes the lives of two lovers and a young girl.",
                            Director = "Joe Wright",
                            DurationMinutes = 123,
                            Grade = 0f,
                            IsComingSoon = true,
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseYear = 2007,
                            Title = "Atonement",
                            TrailerUrl = "https://www.youtube.com/watch?v=rkVg3jWToW0"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Logan travels to Japan, where he confronts his past and faces a deadly battle that will change him forever.",
                            Director = "James Mangold",
                            DurationMinutes = 126,
                            Grade = 0f,
                            IsComingSoon = true,
                            IsDeleted = false,
                            ReleaseDate = new DateTime(2025, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReleaseYear = 2013,
                            Title = "The Wolverine",
                            TrailerUrl = "https://www.youtube.com/watch?v=th1NTVIhUQU"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.MovieActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActorId = 1,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 2,
                            ActorId = 2,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 3,
                            ActorId = 3,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 4,
                            ActorId = 4,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 5,
                            ActorId = 5,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 6,
                            ActorId = 6,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 7,
                            ActorId = 7,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 8,
                            ActorId = 1,
                            MovieId = 11
                        },
                        new
                        {
                            Id = 9,
                            ActorId = 3,
                            MovieId = 11
                        },
                        new
                        {
                            Id = 10,
                            ActorId = 7,
                            MovieId = 12
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 11,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 3,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 9,
                            MovieId = 4
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 1,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 4,
                            MovieId = 5
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 2,
                            MovieId = 11
                        },
                        new
                        {
                            Id = 8,
                            GenreId = 11,
                            MovieId = 11
                        },
                        new
                        {
                            Id = 9,
                            GenreId = 1,
                            MovieId = 12
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("NewsArticles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Get ready for a spooky night at the cinema! Coraline is back on the big screen in stunning 3D, just in time for Halloween. Don't miss the chance to experience this animated classic like never before.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 8, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Coraline Returns for a Halloween 3D Special",
                            Type = "news"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Content = "The wait is almost over! Deadpool & Wolverine hits theaters next month. Secure your tickets today and be among the first to see Marvel's most chaotic duo on the big screen.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Deadpool & Wolverine Premieres Next Month – Tickets on Sale Now!",
                            Type = "news"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Content = "Barbie has become a global phenomenon, smashing box office records and charming audiences everywhere. Don't miss your chance to watch the year's most talked-about film on the big screen.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 8, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Barbie Breaks Box Office Records Worldwide",
                            Type = "news"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            Content = "Join us for a special screening of Pride and Prejudice, the timeless romantic drama that continues to capture hearts around the world. A perfect evening for fans of classic cinema and unforgettable love stories.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 8, 20, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Romantic Classics Night: Pride and Prejudice Returns",
                            Type = "news"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 1,
                            Content = "Join us for a special screening of Atonement, the timeless romantic drama that continues to capture hearts around the world. A perfect evening for fans of classic cinema and unforgettable love stories.",
                            EventDate = new DateTime(2025, 9, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 9, 4, 18, 37, 25, 39, DateTimeKind.Unspecified),
                            Title = "Atonement Returns for a Special Screening",
                            Type = "event"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 1,
                            Content = "Premiere Date for the Wolverine sequel has been announced. Don't miss your chance to see the movie on the big screen.",
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 9, 4, 19, 10, 44, 5, DateTimeKind.Unspecified),
                            Title = "The Wolverine: Premiere Date Announced",
                            Type = "news"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 1,
                            Content = "Get ready for an epic summer movie marathon! We've curated a lineup of classic and contemporary films that are perfect for a relaxing weekend at the cinema.",
                            EventDate = new DateTime(2025, 9, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            PublishDate = new DateTime(2025, 9, 4, 19, 11, 28, 554, DateTimeKind.Unspecified),
                            Title = "Summer Movie Marathon Announced",
                            Type = "event"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Code = "899",
                            Description = "Welcoming all our new users with a 20% discount on their first purchase.",
                            DiscountPercentage = 20m,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "New user promotion",
                            StartDate = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Code = "50",
                            Description = "50% off",
                            DiscountPercentage = 50m,
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "eCinema Summer Promotion",
                            StartDate = new DateTime(2025, 9, 5, 0, 0, 0, 670, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Code = "SEP5",
                            Description = "5% discount on all tickets in September.",
                            DiscountPercentage = 5m,
                            EndDate = new DateTime(2025, 9, 30, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "September Sale",
                            StartDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<string>("QrcodeBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("PromotionId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            NumberOfTickets = 2,
                            OriginalPrice = 10.00m,
                            PaymentType = "Cash",
                            QrcodeBase64 = "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",
                            ReservationTime = new DateTime(2024, 9, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ScreeningId = 1,
                            State = "UsedReservationState",
                            TotalPrice = 10.00m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            NumberOfTickets = 1,
                            OriginalPrice = 5.00m,
                            QrcodeBase64 = "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",
                            ReservationTime = new DateTime(2025, 9, 8, 15, 45, 6, 721, DateTimeKind.Unspecified),
                            ScreeningId = 3,
                            State = "ApprovedReservationState",
                            TotalPrice = 5.00m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ReservationSeat", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReservedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReservationSeats");

                    b.HasData(
                        new
                        {
                            ReservationId = 1,
                            SeatId = 1,
                            ReservedAt = new DateTime(2024, 3, 14, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 1,
                            SeatId = 2,
                            ReservedAt = new DateTime(2024, 3, 14, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReservationId = 2,
                            SeatId = 10,
                            ReservedAt = new DateTime(2025, 9, 8, 15, 45, 6, 721, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique()
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "A beautiful adaptation of the classic novel. The cinematography and performances are outstanding.",
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            IsSpoiler = false,
                            MovieId = 3,
                            Rating = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Visually stunning and delightfully creepy. Perfect for both kids and adults.",
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            IsSpoiler = false,
                            MovieId = 4,
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "A classic romance brought to life with excellent performances.",
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            IsSpoiler = false,
                            MovieId = 3,
                            Rating = 4,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "The perfect blend of action and humor. Great chemistry between the leads!",
                            CreatedAt = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            IsSpoiler = false,
                            MovieId = 5,
                            Rating = 5,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "user"
                        },
                        new
                        {
                            Id = 3,
                            Name = "staff"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("HasSubtitles")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("ScreeningFormatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScreeningFormatId");

                    b.ToTable("Screenings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 5.00m,
                            EndTime = new DateTime(2025, 9, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 3,
                            HasSubtitles = false,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 4,
                            ScreeningFormatId = 1,
                            StartTime = new DateTime(2025, 9, 8, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 5.00m,
                            EndTime = new DateTime(2025, 9, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 3,
                            HasSubtitles = false,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 3,
                            ScreeningFormatId = 2,
                            StartTime = new DateTime(2025, 9, 8, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 10.00m,
                            EndTime = new DateTime(2025, 9, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 3,
                            HasSubtitles = false,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 5,
                            ScreeningFormatId = 1,
                            StartTime = new DateTime(2025, 9, 8, 18, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 5.00m,
                            EndTime = new DateTime(2025, 9, 8, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 5,
                            HasSubtitles = false,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 5,
                            ScreeningFormatId = 4,
                            StartTime = new DateTime(2025, 10, 8, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 3.00m,
                            EndTime = new DateTime(2025, 9, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 2,
                            HasSubtitles = true,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 4,
                            ScreeningFormatId = 2,
                            StartTime = new DateTime(2025, 9, 30, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 5.00m,
                            EndTime = new DateTime(2025, 9, 29, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            HallId = 4,
                            HasSubtitles = false,
                            IsDeleted = false,
                            Language = "English",
                            MovieId = 3,
                            ScreeningFormatId = 1,
                            StartTime = new DateTime(2025, 9, 29, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ScreeningFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("ScreeningFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Standard digital projection",
                            IsDeleted = false,
                            Name = "2D",
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Immersive 3D experience with special glasses",
                            IsDeleted = false,
                            Name = "3D",
                            PriceMultiplier = 1.3m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Premium large-format experience with enhanced picture and sound",
                            IsDeleted = false,
                            Name = "IMAX",
                            PriceMultiplier = 1.8m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Motion seats and environmental effects synchronized with the movie",
                            IsDeleted = false,
                            Name = "4DX",
                            PriceMultiplier = 2.0m
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ScreeningSeat", b =>
                {
                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("bit");

                    b.HasKey("ScreeningId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("ScreeningSeats");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "A2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "A3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "A4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "A5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "A6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "A7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "A8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "B1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "B2"
                        },
                        new
                        {
                            Id = 11,
                            Name = "B3"
                        },
                        new
                        {
                            Id = 12,
                            Name = "B4"
                        },
                        new
                        {
                            Id = 13,
                            Name = "B5"
                        },
                        new
                        {
                            Id = 14,
                            Name = "B6"
                        },
                        new
                        {
                            Id = 15,
                            Name = "B7"
                        },
                        new
                        {
                            Id = 16,
                            Name = "B8"
                        },
                        new
                        {
                            Id = 17,
                            Name = "C1"
                        },
                        new
                        {
                            Id = 18,
                            Name = "C2"
                        },
                        new
                        {
                            Id = 19,
                            Name = "C3"
                        },
                        new
                        {
                            Id = 20,
                            Name = "C4"
                        },
                        new
                        {
                            Id = 21,
                            Name = "C5"
                        },
                        new
                        {
                            Id = 22,
                            Name = "C6"
                        },
                        new
                        {
                            Id = 23,
                            Name = "C7"
                        },
                        new
                        {
                            Id = 24,
                            Name = "C8"
                        },
                        new
                        {
                            Id = 25,
                            Name = "D1"
                        },
                        new
                        {
                            Id = 26,
                            Name = "D2"
                        },
                        new
                        {
                            Id = 27,
                            Name = "D3"
                        },
                        new
                        {
                            Id = 28,
                            Name = "D4"
                        },
                        new
                        {
                            Id = 29,
                            Name = "D5"
                        },
                        new
                        {
                            Id = 30,
                            Name = "D6"
                        },
                        new
                        {
                            Id = 31,
                            Name = "D7"
                        },
                        new
                        {
                            Id = 32,
                            Name = "D8"
                        },
                        new
                        {
                            Id = 33,
                            Name = "E1"
                        },
                        new
                        {
                            Id = 34,
                            Name = "E2"
                        },
                        new
                        {
                            Id = 35,
                            Name = "E3"
                        },
                        new
                        {
                            Id = 36,
                            Name = "E4"
                        },
                        new
                        {
                            Id = 37,
                            Name = "E5"
                        },
                        new
                        {
                            Id = 38,
                            Name = "E6"
                        },
                        new
                        {
                            Id = 39,
                            Name = "E7"
                        },
                        new
                        {
                            Id = 40,
                            Name = "E8"
                        },
                        new
                        {
                            Id = 41,
                            Name = "F1"
                        },
                        new
                        {
                            Id = 42,
                            Name = "F2"
                        },
                        new
                        {
                            Id = 43,
                            Name = "F3"
                        },
                        new
                        {
                            Id = 44,
                            Name = "F4"
                        },
                        new
                        {
                            Id = 45,
                            Name = "F5"
                        },
                        new
                        {
                            Id = 46,
                            Name = "F6"
                        },
                        new
                        {
                            Id = 47,
                            Name = "F7"
                        },
                        new
                        {
                            Id = 48,
                            Name = "F8"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.StripePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentProvider")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StripePayments", (string)null);
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@ecinema.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "User",
                            PasswordHash = "6EqP+3jBodPH1qKpQDCsf+2BUV5iJqY5NDC+rWpfFKw=",
                            PasswordSalt = "bw7nttYe6MqZzgQhTB1LXQ==",
                            ReceiveNotifications = true,
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@ecinema.com",
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "One",
                            PasswordHash = "6EqP+3jBodPH1qKpQDCsf+2BUV5iJqY5NDC+rWpfFKw=",
                            PasswordSalt = "bw7nttYe6MqZzgQhTB1LXQ==",
                            ReceiveNotifications = true,
                            RoleId = 2,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@ecinema.com",
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "Two",
                            PasswordHash = "6EqP+3jBodPH1qKpQDCsf+2BUV5iJqY5NDC+rWpfFKw=",
                            PasswordSalt = "bw7nttYe6MqZzgQhTB1LXQ==",
                            ReceiveNotifications = true,
                            RoleId = 2,
                            Username = "user2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@ecinema.com",
                            FirstName = "Staff",
                            IsDeleted = false,
                            LastName = "User",
                            PasswordHash = "6EqP+3jBodPH1qKpQDCsf+2BUV5iJqY5NDC+rWpfFKw=",
                            PasswordSalt = "bw7nttYe6MqZzgQhTB1LXQ==",
                            ReceiveNotifications = true,
                            RoleId = 3,
                            Username = "staff"
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.UserMovieList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId", "ListType")
                        .IsUnique();

                    b.ToTable("UserMovieLists");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watched",
                            MovieId = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watched",
                            MovieId = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "favorites",
                            MovieId = 11,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watchlist",
                            MovieId = 12,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watched",
                            MovieId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watched",
                            MovieId = 5,
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "favorites",
                            MovieId = 11,
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            ListType = "watchlist",
                            MovieId = 4,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.UserPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PromotionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId", "PromotionId")
                        .IsUnique();

                    b.ToTable("UserPromotions", (string)null);
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.MovieActor", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.MovieGenre", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.NewsArticle", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Reservation", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.StripePayment", "Payment")
                        .WithOne()
                        .HasForeignKey("eCinema.Services.Database.Entities.Reservation", "PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eCinema.Services.Database.Entities.Promotion", "Promotion")
                        .WithMany("Reservations")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eCinema.Services.Database.Entities.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Promotion");

                    b.Navigation("Screening");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ReservationSeat", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Reservation", "Reservation")
                        .WithMany("ReservationSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Review", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Screening", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.ScreeningFormat", "Format")
                        .WithMany("Screenings")
                        .HasForeignKey("ScreeningFormatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Format");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ScreeningSeat", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Screening", "Screening")
                        .WithMany("ScreeningSeats")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.User", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.UserMovieList", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.UserPromotion", b =>
                {
                    b.HasOne("eCinema.Services.Database.Entities.Promotion", "Promotion")
                        .WithMany("UserPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCinema.Services.Database.Entities.User", "User")
                        .WithMany("UserPromotions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Reviews");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Promotion", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("UserPromotions");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationSeats");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.Screening", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("ScreeningSeats");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.ScreeningFormat", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("eCinema.Services.Database.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("UserPromotions");
                });
#pragma warning restore 612, 618
        }
    }
}
